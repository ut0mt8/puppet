#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

redback_ps_default_levels = (30, 50)
inventory_ps_redback = [ ] 

def inventory_redback_ps(checkname, info):
    inventory = []
    for proc, cpu in info:
	if proc != '' and proc in inventory_ps_redback:
            inventory.append( (proc, "", redback_ps_default_levels) )
    return inventory


def check_redback_ps(item, params, info):
    for line in info:
        if line[0] == item:
            ps_load = int(line[1])
            if ps_load >= 0 <= 100:
                status = 0
                output = ''
                if ps_load >= params[1]:
                    status = 2
                    output = ' (Above %d%%)' % params[1]
                elif ps_load >= params[0]:
                    status = 1
                    output = ' (Above %d%%)' % params[0]

                return (status, '%s - CPU Usage is %d%% %s' % (nagios_state_names[status], ps_load, output),
                       [('load', '%d%%' % ps_load, params[0], params[1], 0, 100)])

    return (3, "UNKNOWN - Invalid  information in snmp data")

check_info['redback_ps'] = (check_redback_ps, "Proccess_%s Usage", 0,  inventory_redback_ps)
snmp_info['redback_ps'] = ( "1.3.6.1.4.1.2352.2.6.3.1.1", ["1","7"] ) 

snmp_scan_functions['redback_ps'] = lambda oid: "redback" in oid(".1.3.6.1.2.1.1.1.0").lower()

