#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

redback_cpu_default_levels = (70, 90)

def inventory_redback_cpu(checkname, info):
    inventory = []
    index = 0
    for cpu in info:
        inventory.append( (index, "", redback_cpu_default_levels) )
	index += 1
    return inventory


def check_redback_cpu(item, params, info):
    if len(info) == 1:
        cpu_load = int(info[0][2])
        if cpu_load >= 0 <= 100:
            status = 0
            output = ''
            if cpu_load >= params[1]:
                status = 2
                output = ' (Above %d%%)' % params[1]
            elif cpu_load >= params[0]:
                status = 1
                output = ' (Above %d%%)' % params[0]

            return (status, '%s - CPU load is %d%% %s' % (nagios_state_names[status], cpu_load, output),
                   [('load', '%d%%' % cpu_load, params[0], params[1], 0, 100)])

    return (3, "UNKNOWN - Invalid  information in snmp data")

check_info['redback_cpu'] = (check_redback_cpu, "CPU%s", 0,  inventory_redback_cpu)
snmp_info['redback_cpu'] = ( ".1.3.6.1.4.1.2352.2.6.1", ["1","2","3"] ) 

snmp_scan_functions['redback_cpu'] = lambda oid: "redback" in oid(".1.3.6.1.2.1.1.1.0").lower()
